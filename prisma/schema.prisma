generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  authorId    Int
  genreId     Int
  publisherId Int

  // Relations
  author    Author     @relation(fields: [authorId], references: [id])
  genre     Genre      @relation(fields: [genreId], references: [id])
  publisher Publisher  @relation(fields: [publisherId], references: [id])
  reviews   Review[]
  loans     Loan[]
  favorites Favorite[]
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  bio       String?
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  username String @unique
  email    String @unique
  password String
  role     Role   @default(USER)

  reviews   Review[]
  loans     Loan[]
  favorites Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String?
  rating    Int // 1 to 5 
  userId    Int
  bookId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model Loan {
  id         Int       @id @default(autoincrement())
  userId     Int
  bookId     Int
  borrowedAt DateTime  @default(now())
  returnedAt DateTime?

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model Favorite {
  id     Int @id @default(autoincrement())
  userId Int
  bookId Int

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

enum Role {
  USER
  ADMIN
}
